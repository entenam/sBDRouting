//
// Generated file, do not edit! Created by opp_msgc 4.1 from src/node/communication/routing/sBDRouting/SBDRouting.msg.
//

#ifndef _SBDROUTING_M_H_
#define _SBDROUTING_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0401
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "RoutingPacket_m.h"
// }}



/**
 * Enum generated from <tt>src/node/communication/routing/sBDRouting/SBDRouting.msg</tt> by opp_msgc.
 * <pre>
 * enum SBDRoutingPacketDef {
 * 	SBD_DATA_PACKET_LOCAL_UPDATE = 1;
 * 	SBD_DATA_PACKET_REMOTE_UPDATE = 2;
 * 	SBD_BEACON_PACKET = 3;
 * 	SBD_JOIN_PACKET = 4;
 * 	SBD_TDMA_SCHEDULE_PACKET = 5;
 * 	SBD_RANGE_QUERY_PACKET = 6;
 * 	SBD_RANGE_LOCAL_QUERY = 7;
 * }
 * </pre>
 */
enum SBDRoutingPacketDef {
    SBD_DATA_PACKET_LOCAL_UPDATE = 1,
    SBD_DATA_PACKET_REMOTE_UPDATE = 2,
    SBD_BEACON_PACKET = 3,
    SBD_JOIN_PACKET = 4,
    SBD_TDMA_SCHEDULE_PACKET = 5,
    SBD_RANGE_QUERY_PACKET = 6,
    SBD_RANGE_LOCAL_QUERY = 7
};

/**
 * Class generated from <tt>src/node/communication/routing/sBDRouting/SBDRouting.msg</tt> by opp_msgc.
 * <pre>
 * packet SBDRoutingPacket extends RoutingPacket {
 * 	int SBDRoutingPacketKind enum (SBDRoutingPacketDef);
 * 	int destSectorHeadID;
 * 	int slot[];
 * 	int segmentAddress[];
 * 	string nextHop;
 * 	string prevHop;
 * 	int sectorSlotNumber;
 * }
 * </pre>
 */
class SBDRoutingPacket : public ::RoutingPacket
{
  protected:
    int SBDRoutingPacketKind_var;
    int destSectorHeadID_var;
    int *slot_var; // array ptr
    unsigned int slot_arraysize;
    int *segmentAddress_var; // array ptr
    unsigned int segmentAddress_arraysize;
    opp_string nextHop_var;
    opp_string prevHop_var;
    int sectorSlotNumber_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SBDRoutingPacket&);

  public:
    SBDRoutingPacket(const char *name=NULL, int kind=0);
    SBDRoutingPacket(const SBDRoutingPacket& other);
    virtual ~SBDRoutingPacket();
    SBDRoutingPacket& operator=(const SBDRoutingPacket& other);
    virtual SBDRoutingPacket *dup() const {return new SBDRoutingPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getSBDRoutingPacketKind() const;
    virtual void setSBDRoutingPacketKind(int SBDRoutingPacketKind_var);
    virtual int getDestSectorHeadID() const;
    virtual void setDestSectorHeadID(int destSectorHeadID_var);
    virtual void setSlotArraySize(unsigned int size);
    virtual unsigned int getSlotArraySize() const;
    virtual int getSlot(unsigned int k) const;
    virtual void setSlot(unsigned int k, int slot_var);
    virtual void setSegmentAddressArraySize(unsigned int size);
    virtual unsigned int getSegmentAddressArraySize() const;
    virtual int getSegmentAddress(unsigned int k) const;
    virtual void setSegmentAddress(unsigned int k, int segmentAddress_var);
    virtual const char * getNextHop() const;
    virtual void setNextHop(const char * nextHop_var);
    virtual const char * getPrevHop() const;
    virtual void setPrevHop(const char * prevHop_var);
    virtual int getSectorSlotNumber() const;
    virtual void setSectorSlotNumber(int sectorSlotNumber_var);
};

inline void doPacking(cCommBuffer *b, SBDRoutingPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SBDRoutingPacket& obj) {obj.parsimUnpack(b);}


#endif // _SBDROUTING_M_H_
